import streamlit as st
from search_core import make_search_index, make_search_index_qa, search_query_all, answer_question
import pandas as pd
import json

# Setting page layout
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/–≤–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)
# Main page heading
#st.title("–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Google Open Images –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É")

searchStarted= False
qaStarted= False

LANGUAGE= 'language'
if LANGUAGE not in st.session_state:
    st.session_state[LANGUAGE]= '–†—É—Å—Å–∫–∏–π'
    
if "visibility" not in st.session_state:
    st.session_state.visibility = "visible"
    st.session_state.disabled = False
    st.session_state.horizontal = True

with st.sidebar:
    st.session_state[LANGUAGE]= st.sidebar.radio(
            "–Ø–∑—ã–∫/Language",
            ["–†—É—Å—Å–∫–∏–π", "English"],
            key="–†—É—Å—Å–∫–∏–π",
            label_visibility=st.session_state.visibility,
            disabled=st.session_state.disabled,
            horizontal=st.session_state.horizontal,
        )
    if st.session_state[LANGUAGE]== '–†—É—Å—Å–∫–∏–π':    
        st.sidebar.subheader('–î–µ–º–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏—è: "–£—Ä–∞–ª 44202-80–ú", 74 –º–æ–¥—É–ª—è –¥–∞–Ω–Ω—ã—Ö, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫')
        tab1, tab2 = st.sidebar.tabs(["–ü–æ–∏—Å–∫ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–í–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã"])
    else:
        st.sidebar.subheader('Publication asset: "S1000D release 5.0 bike example", 101 data module, english language')
        tab1, tab2 = st.sidebar.tabs(["Indexed search", "Question answering"])

with tab1:
    if st.session_state[LANGUAGE]== '–†—É—Å—Å–∫–∏–π':
        st.header("–ü–æ–∏—Å–∫ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        search_input = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:', value='–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è')
        searchStarted = st.button('–ò—Å–∫–∞—Ç—å')
    else:
        st.header("Publication content search")
        search_input = st.text_input(label='Enter query:', value='bicycle wheel')
        searchStarted = st.button('Search')

with tab2:
    if st.session_state[LANGUAGE]== '–†—É—Å—Å–∫–∏–π':
        st.header("–í–æ–ø—Ä–æ—Å—ã-–æ—Ç–≤–µ—Ç—ã")
        qa_input = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:', value='–ö–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞?')
        #qa_input = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:', value='–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–ø—É—Å–∫–æ–≤–æ–≥–æ –ø–æ–¥–æ–≥—Ä–µ–≤–∞?')
        #qa_input = st.text_input(label='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:', value='–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å —Å –Ω–∞–≥–Ω–µ—Ç–∞—Ç–µ–ª–µ–º –≤–æ–∑–¥—É—Ö–∞?')
        qaStarted = st.button('–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç')
    else:
        st.header("Question answering")
        qa_input = st.text_input(label='Enter question:', value='How many brake pads on the bicycle?')
        qaStarted = st.button('Find out')
 
if searchStarted==True:
    if st.session_state[LANGUAGE]== '–†—É—Å—Å–∫–∏–π':
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")
        search_result= search_query_all(search_input, language="ru")
        df = pd.DataFrame(pd.json_normalize(search_result))
        df.columns=['–ü–∞—Ä–∞–≥—Ä–∞—Ñ –º–æ–¥—É–ª—è –¥–∞–Ω–Ω—ã—Ö', '–ö–æ–¥ –ú–î']
        st.table(df) 
    else:
        st.header("Search results")
        search_result= search_query_all(search_input, language="en")
        df = pd.DataFrame(pd.json_normalize(search_result))
        df.columns=['Data module paragraph', 'Data module code']
        st.table(df) 
if qaStarted==True:
    if st.session_state[LANGUAGE]== '–†—É—Å—Å–∫–∏–π':
        st.header("–û—Ç–≤–µ—Ç")
        mode_string = 'strict'
        model_string = '1'
        answer= answer_question(qa_input, mode_string, model_string, language="ru")
        df = pd.DataFrame(pd.json_normalize(answer))
        df.columns=['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–û—Ç–≤–µ—Ç', '–ö–æ–¥ –ú–î']
        st.table(df)    
    else:
        st.header("Answer")
        mode_string = 'strict'
        model_string = '1'
        answer= answer_question(qa_input, mode_string, model_string, language="en")
        df = pd.DataFrame(pd.json_normalize(answer))
        df.columns=['Score', 'Answer', 'Data module code']
        st.table(df)   



